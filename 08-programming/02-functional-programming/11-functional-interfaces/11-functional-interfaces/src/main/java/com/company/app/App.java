package com.company.app;

import java.util.function.Consumer;
import java.util.function.Function;
import java.util.function.Predicate;
import java.util.function.Supplier;
import java.util.stream.Stream;

interface TailCall<T>{
    TailCall<T> apply();
}
public class App
{
    static void streamTest() {
        /*
        iterate() takes two arguments: a seed and a function
        A seed is the first element of the stream. The second element is generated by applying the function to the first
        element. The third element is generated by applying the function on the second element, and so on.
         */
        Stream<Integer> numbers = Stream.iterate(1, n -> n * 2)
                .limit(3);
        numbers.forEach(n -> System.out.printf("%s ", n));
        System.out.println("");
        Stream<Integer> negativeNumbers = Stream.iterate(-1, n -> n * 2)
                .limit(3);
        negativeNumbers.forEach(n -> System.out.printf("%s ", n));
        System.out.println("");
    }
    public static void main( String[] args )
    {
        System.out.println("#Custom TailCall");
        TailCall<Integer> tailCall = () -> {
                System.out.println("TailCall.apply() returns a new TailCall");
                return new TailCall<Integer>() {
                    @Override
                    public TailCall<Integer> apply() {
                        return null;
                    }
                };
        };
        System.out.println(tailCall.apply());
        System.out.println("#Stream.iterate TailCall");
        Stream<TailCall<Integer>> tailCalls = Stream.iterate(tailCall, TailCall::apply)
                .limit(3);
        tailCalls.forEach(t -> {
            if(t != null){
                t.apply();
            }
            else{
                System.out.println("t is null");
            }
        });

        System.out.println("#streamTest");
        streamTest();

        System.out.println("#Predicate");
        Predicate<String> predicate = s -> s.length() == 3;
        System.out.println("Tom size = 3 ? " + predicate.test("Tom"));

        System.out.println("#Supplier");
        Supplier<String> supplier = () -> "product";
        System.out.println(supplier.get());

        System.out.println("#Consumer");
        Consumer<String> consumer = System.out::println;
        consumer.accept("consumer");

        System.out.println("#Function");
        Function<String, Integer> function = String::length;
        System.out.println("Tom length = "+function.apply("Tom"));
    }
}
/*
output:
#Custom TailCall
TailCall.apply() returns a new TailCall
com.company.app.App$1@1d81eb93
#Stream.iterate TailCall
TailCall.apply() returns a new TailCall
TailCall.apply() returns a new TailCall
t is null
#streamTest
1 2 4
-1 -2 -4
#Predicate
Tom size = 3 ? true
#Supplier
product
#Consumer
consumer
#Function
Tom length = 3
 */
